
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jan 14 12:30:38 CET 2025
//----------------------------------------------------

package mini_java;

import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jan 14 12:30:38 CET 2025
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\004\010\000\002\007\004" +
    "\000\002\007\002\000\002\010\004\000\002\010\002\000" +
    "\002\011\015\000\002\011\005\000\002\011\005\000\002" +
    "\011\006\000\002\011\006\000\002\005\003\000\002\006" +
    "\003\000\002\013\005\000\002\017\005\000\002\020\003" +
    "\000\002\020\002\000\002\021\005\000\002\021\003\000" +
    "\002\016\004\000\002\014\003\000\002\014\003\000\002" +
    "\015\003\000\002\015\003\000\002\012\003\000\002\012" +
    "\004\000\002\012\007\000\002\012\005\000\002\012\007" +
    "\000\002\012\011\000\002\012\004\000\002\012\005\000" +
    "\002\012\003\000\002\012\013\000\002\024\003\000\002" +
    "\024\002\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\004\000\002\023\004\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\003\000\002\023\005\000\002\023" +
    "\005\000\002\023\007\000\002\023\007\000\002\023\006" +
    "\000\002\023\010\000\002\023\006\000\002\023\006\000" +
    "\002\023\005\000\002\023\005\000\002\026\003\000\002" +
    "\026\002\000\002\025\005\000\002\025\003\000\002\022" +
    "\004\000\002\022\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\006\002\ufffe\010\007\001\002\000\006\002" +
    "\ufffe\010\007\001\002\000\004\002\222\001\002\000\004" +
    "\002\000\001\002\000\004\004\010\001\002\000\006\012" +
    "\012\035\ufffb\001\002\000\004\035\014\001\002\000\004" +
    "\004\013\001\002\000\004\035\ufffc\001\002\000\016\004" +
    "\016\007\021\016\015\021\017\025\022\036\ufff9\001\002" +
    "\000\036\004\uffea\006\uffea\015\uffea\026\uffea\027\uffea\032" +
    "\uffea\037\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea" +
    "\046\uffea\047\uffea\001\002\000\006\004\uffe7\031\031\001" +
    "\002\000\004\023\204\001\002\000\004\036\203\001\002" +
    "\000\036\004\uffe9\006\uffe9\015\uffe9\026\uffe9\027\uffe9\032" +
    "\uffe9\037\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9" +
    "\046\uffe9\047\uffe9\001\002\000\004\004\200\001\002\000" +
    "\004\004\027\001\002\000\016\004\016\007\021\016\015" +
    "\021\017\025\022\036\ufff9\001\002\000\036\004\uffe8\006" +
    "\uffe8\015\uffe8\026\uffe8\027\uffe8\032\uffe8\037\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\001" +
    "\002\000\004\036\ufffa\001\002\000\006\031\031\041\030" +
    "\001\002\000\016\004\ufff7\007\ufff7\016\ufff7\021\ufff7\025" +
    "\ufff7\036\ufff7\001\002\000\012\004\114\007\021\016\015" +
    "\032\uffee\001\002\000\004\035\033\001\002\000\042\004" +
    "\036\005\050\007\021\013\053\014\045\016\015\017\052" +
    "\020\054\022\044\024\047\030\043\031\040\035\033\036" +
    "\uffbd\041\035\044\051\001\002\000\016\004\ufff5\007\ufff5" +
    "\016\ufff5\021\ufff5\025\ufff5\036\ufff5\001\002\000\044\004" +
    "\uffe6\005\uffe6\007\uffe6\011\uffe6\013\uffe6\014\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\022\uffe6\024\uffe6\030\uffe6\031\uffe6\035" +
    "\uffe6\036\uffe6\041\uffe6\044\uffe6\001\002\000\036\004\uffe7" +
    "\006\uffcd\015\uffcd\026\uffcd\027\uffcd\031\130\040\127\041" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\001\002\000\030\006\065\015\067\026\064\027\074\041" +
    "\167\042\071\043\070\044\063\045\073\046\072\047\066" +
    "\001\002\000\026\004\060\005\050\007\021\016\015\017" +
    "\052\020\054\024\047\030\043\031\040\044\051\001\002" +
    "\000\004\004\154\001\002\000\004\036\153\001\002\000" +
    "\022\004\060\005\050\017\052\020\054\024\047\030\043" +
    "\031\040\044\051\001\002\000\024\004\060\005\050\017" +
    "\052\020\054\024\047\030\043\031\040\041\147\044\051" +
    "\001\002\000\004\031\141\001\002\000\044\004\uffde\005" +
    "\uffde\007\uffde\011\uffde\013\uffde\014\uffde\016\uffde\017\uffde" +
    "\020\uffde\022\uffde\024\uffde\030\uffde\031\uffde\035\uffde\036" +
    "\uffde\041\uffde\044\uffde\001\002\000\034\006\uffd9\015\uffd9" +
    "\026\uffd9\027\uffd9\032\uffd9\037\uffd9\041\uffd9\042\uffd9\043" +
    "\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\001\002\000\034" +
    "\006\uffda\015\uffda\026\uffda\027\uffda\032\uffda\037\uffda\041" +
    "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda" +
    "\001\002\000\022\004\060\005\050\017\052\020\054\024" +
    "\047\030\043\031\040\044\051\001\002\000\004\004\134" +
    "\001\002\000\004\031\057\001\002\000\034\006\uffd8\015" +
    "\uffd8\026\uffd8\027\uffd8\032\uffd8\037\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\001\002\000" +
    "\042\004\036\005\050\007\021\013\053\014\045\016\015" +
    "\017\052\020\054\022\044\024\047\030\043\031\040\035" +
    "\033\036\uffbd\041\035\044\051\001\002\000\004\036\uffbe" +
    "\001\002\000\024\004\060\005\050\017\052\020\054\024" +
    "\047\030\043\031\040\041\uffdb\044\051\001\002\000\040" +
    "\006\uffcd\015\uffcd\026\uffcd\027\uffcd\031\130\032\uffcd\037" +
    "\uffcd\040\127\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\001\002\000\004\041\121\001\002\000" +
    "\032\006\065\015\067\026\064\027\074\032\uffdc\041\uffdc" +
    "\042\071\043\070\044\063\045\073\046\072\047\066\001" +
    "\002\000\022\004\060\005\050\017\052\020\054\024\047" +
    "\030\043\031\040\044\051\001\002\000\022\004\060\005" +
    "\050\017\052\020\054\024\047\030\043\031\040\044\051" +
    "\001\002\000\022\004\060\005\050\017\052\020\054\024" +
    "\047\030\043\031\040\044\051\001\002\000\022\004\060" +
    "\005\050\017\052\020\054\024\047\030\043\031\040\044" +
    "\051\001\002\000\010\004\114\007\021\016\015\001\002" +
    "\000\022\004\060\005\050\017\052\020\054\024\047\030" +
    "\043\031\040\044\051\001\002\000\004\004\100\001\002" +
    "\000\022\004\060\005\050\017\052\020\054\024\047\030" +
    "\043\031\040\044\051\001\002\000\022\004\060\005\050" +
    "\017\052\020\054\024\047\030\043\031\040\044\051\001" +
    "\002\000\022\004\060\005\050\017\052\020\054\024\047" +
    "\030\043\031\040\044\051\001\002\000\034\006\065\015" +
    "\067\026\064\027\uffce\032\uffce\037\uffce\041\uffce\042\071" +
    "\043\070\044\063\045\073\046\072\047\066\001\002\000" +
    "\034\006\uffd3\015\uffd3\026\uffd3\027\uffd3\032\uffd3\037\uffd3" +
    "\041\uffd3\042\071\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\001\002\000\034\006\uffd2\015\uffd2\026\uffd2\027\uffd2" +
    "\032\uffd2\037\uffd2\041\uffd2\042\071\043\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\047\uffd2\001\002\000\040\006\uffcc\015\uffcc" +
    "\026\uffcc\027\uffcc\031\102\032\uffcc\037\uffcc\040\101\041" +
    "\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\001\002\000\022\004\060\005\050\017\052\020\054\024" +
    "\047\030\043\031\040\044\051\001\002\000\024\004\060" +
    "\005\050\017\052\020\054\024\047\030\043\031\040\032" +
    "\uffc1\044\051\001\002\000\004\032\110\001\002\000\004" +
    "\032\uffc2\001\002\000\032\006\065\015\067\026\064\027" +
    "\074\032\uffbf\037\106\042\071\043\070\044\063\045\073" +
    "\046\072\047\066\001\002\000\022\004\060\005\050\017" +
    "\052\020\054\024\047\030\043\031\040\044\051\001\002" +
    "\000\004\032\uffc0\001\002\000\034\006\uffc7\015\uffc7\026" +
    "\uffc7\027\uffc7\032\uffc7\037\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\045\uffc7\046\uffc7\047\uffc7\001\002\000\034\006" +
    "\065\015\067\026\064\027\074\032\uffca\037\uffca\041\uffca" +
    "\042\071\043\070\044\063\045\073\046\072\047\066\001" +
    "\002\000\034\006\uffd5\015\uffd5\026\uffd5\027\uffd5\032\uffd5" +
    "\037\uffd5\041\uffd5\042\071\043\uffd5\044\uffd5\045\073\046" +
    "\072\047\066\001\002\000\034\006\uffc4\015\uffc4\026\uffc4" +
    "\027\uffc4\032\uffc4\037\uffc4\041\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\001\002\000\036\004\uffe7" +
    "\006\uffe7\015\uffe7\026\uffe7\027\uffe7\032\uffe7\037\uffe7\041" +
    "\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\001\002\000\034\006\uffd1\015\uffd1\026\uffd1\027\uffd1\032" +
    "\uffd1\037\uffd1\041\uffd1\042\071\043\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\001\002\000\030\026\uffd0\027\uffd0\032" +
    "\uffd0\037\uffd0\041\uffd0\042\071\043\070\044\063\045\073" +
    "\046\072\047\066\001\002\000\034\006\065\015\067\026" +
    "\uffcf\027\uffcf\032\uffcf\037\uffcf\041\uffcf\042\071\043\070" +
    "\044\063\045\073\046\072\047\066\001\002\000\034\006" +
    "\uffd4\015\uffd4\026\uffd4\027\uffd4\032\uffd4\037\uffd4\041\uffd4" +
    "\042\071\043\uffd4\044\uffd4\045\073\046\072\047\066\001" +
    "\002\000\024\004\060\005\050\017\052\020\054\024\047" +
    "\030\043\031\040\041\uffdb\044\051\001\002\000\004\041" +
    "\123\001\002\000\024\004\060\005\050\017\052\020\054" +
    "\024\047\030\043\031\040\032\uffdb\044\051\001\002\000" +
    "\004\032\125\001\002\000\040\004\036\005\050\007\021" +
    "\013\053\014\045\016\015\017\052\020\054\022\044\024" +
    "\047\030\043\031\040\035\033\041\035\044\051\001\002" +
    "\000\044\004\uffdd\005\uffdd\007\uffdd\011\uffdd\013\uffdd\014" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\022\uffdd\024\uffdd\030\uffdd" +
    "\031\uffdd\035\uffdd\036\uffdd\041\uffdd\044\uffdd\001\002\000" +
    "\022\004\060\005\050\017\052\020\054\024\047\030\043" +
    "\031\040\044\051\001\002\000\024\004\060\005\050\017" +
    "\052\020\054\024\047\030\043\031\040\032\uffc1\044\051" +
    "\001\002\000\004\032\132\001\002\000\034\006\uffc8\015" +
    "\uffc8\026\uffc8\027\uffc8\032\uffc8\037\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\001\002\000" +
    "\034\006\065\015\067\026\064\027\074\032\uffcb\037\uffcb" +
    "\041\uffcb\042\071\043\070\044\063\045\073\046\072\047" +
    "\066\001\002\000\004\031\135\001\002\000\024\004\060" +
    "\005\050\017\052\020\054\024\047\030\043\031\040\032" +
    "\uffc1\044\051\001\002\000\004\032\137\001\002\000\034" +
    "\006\uffc9\015\uffc9\026\uffc9\027\uffc9\032\uffc9\037\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\001\002\000\034\006\uffd7\015\uffd7\026\uffd7\027\uffd7\032" +
    "\uffd7\037\uffd7\041\uffd7\042\071\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\001\002\000\022\004\060\005\050\017" +
    "\052\020\054\024\047\030\043\031\040\044\051\001\002" +
    "\000\030\006\065\015\067\026\064\027\074\032\143\042" +
    "\071\043\070\044\063\045\073\046\072\047\066\001\002" +
    "\000\040\004\036\005\050\007\021\013\053\014\045\016" +
    "\015\017\052\020\054\022\044\024\047\030\043\031\040" +
    "\035\033\041\035\044\051\001\002\000\044\004\uffe2\005" +
    "\uffe2\007\uffe2\011\145\013\uffe2\014\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\022\uffe2\024\uffe2\030\uffe2\031\uffe2\035\uffe2\036" +
    "\uffe2\041\uffe2\044\uffe2\001\002\000\040\004\036\005\050" +
    "\007\021\013\053\014\045\016\015\017\052\020\054\022" +
    "\044\024\047\030\043\031\040\035\033\041\035\044\051" +
    "\001\002\000\044\004\uffe1\005\uffe1\007\uffe1\011\uffe1\013" +
    "\uffe1\014\uffe1\016\uffe1\017\uffe1\020\uffe1\022\uffe1\024\uffe1" +
    "\030\uffe1\031\uffe1\035\uffe1\036\uffe1\041\uffe1\044\uffe1\001" +
    "\002\000\044\004\uffe0\005\uffe0\007\uffe0\011\uffe0\013\uffe0" +
    "\014\uffe0\016\uffe0\017\uffe0\020\uffe0\022\uffe0\024\uffe0\030" +
    "\uffe0\031\uffe0\035\uffe0\036\uffe0\041\uffe0\044\uffe0\001\002" +
    "\000\030\006\065\015\067\026\064\027\074\041\151\042" +
    "\071\043\070\044\063\045\073\046\072\047\066\001\002" +
    "\000\044\004\uffdf\005\uffdf\007\uffdf\011\uffdf\013\uffdf\014" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\022\uffdf\024\uffdf\030\uffdf" +
    "\031\uffdf\035\uffdf\036\uffdf\041\uffdf\044\uffdf\001\002\000" +
    "\034\006\uffd6\015\uffd6\026\uffd6\027\uffd6\032\uffd6\037\uffd6" +
    "\041\uffd6\042\071\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047" +
    "\uffd6\001\002\000\050\004\ufff1\005\ufff1\007\ufff1\011\ufff1" +
    "\013\ufff1\014\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\024\ufff1\025\ufff1\030\ufff1\031\ufff1\035\ufff1\036\ufff1" +
    "\041\ufff1\044\ufff1\001\002\000\006\040\156\041\155\001" +
    "\002\000\044\004\uffe3\005\uffe3\007\uffe3\011\uffe3\013\uffe3" +
    "\014\uffe3\016\uffe3\017\uffe3\020\uffe3\022\uffe3\024\uffe3\030" +
    "\uffe3\031\uffe3\035\uffe3\036\uffe3\041\uffe3\044\uffe3\001\002" +
    "\000\022\004\060\005\050\017\052\020\054\024\047\030" +
    "\043\031\040\044\051\001\002\000\030\006\065\015\067" +
    "\026\064\027\074\041\160\042\071\043\070\044\063\045" +
    "\073\046\072\047\066\001\002\000\044\004\uffe4\005\uffe4" +
    "\007\uffe4\011\uffe4\013\uffe4\014\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\022\uffe4\024\uffe4\030\uffe4\031\uffe4\035\uffe4\036\uffe4" +
    "\041\uffe4\044\uffe4\001\002\000\030\006\065\015\067\026" +
    "\064\027\074\032\165\042\071\043\070\044\063\045\073" +
    "\046\072\047\066\001\002\000\004\032\163\001\002\000" +
    "\022\004\060\005\050\017\052\020\054\024\047\030\043" +
    "\031\040\044\051\001\002\000\034\006\uffc6\015\uffc6\026" +
    "\uffc6\027\uffc6\032\uffc6\037\uffc6\041\uffc6\042\071\043\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\001\002\000\052\004" +
    "\060\005\050\006\uffc3\015\uffc3\017\052\020\054\024\047" +
    "\026\uffc3\027\uffc3\030\043\031\040\032\uffc3\037\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3" +
    "\001\002\000\034\006\uffc5\015\uffc5\026\uffc5\027\uffc5\032" +
    "\uffc5\037\uffc5\041\uffc5\042\071\043\uffc5\044\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\001\002\000\044\004\uffe5\005\uffe5\007" +
    "\uffe5\011\uffe5\013\uffe5\014\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\022\uffe5\024\uffe5\030\uffe5\031\uffe5\035\uffe5\036\uffe5\041" +
    "\uffe5\044\uffe5\001\002\000\004\004\177\001\002\000\004" +
    "\032\uffef\001\002\000\004\032\176\001\002\000\006\032" +
    "\uffec\037\174\001\002\000\010\004\114\007\021\016\015" +
    "\001\002\000\004\032\uffed\001\002\000\004\035\ufff0\001" +
    "\002\000\006\032\uffeb\037\uffeb\001\002\000\004\031\031" +
    "\001\002\000\004\035\033\001\002\000\016\004\ufff4\007" +
    "\ufff4\016\ufff4\021\ufff4\025\ufff4\036\ufff4\001\002\000\006" +
    "\002\ufffd\010\ufffd\001\002\000\004\025\205\001\002\000" +
    "\004\004\206\001\002\000\004\031\ufff3\001\002\000\004" +
    "\031\210\001\002\000\004\004\211\001\002\000\004\004" +
    "\ufff2\001\002\000\004\004\213\001\002\000\004\033\214" +
    "\001\002\000\004\034\215\001\002\000\004\032\216\001" +
    "\002\000\004\035\033\001\002\000\016\004\ufff8\007\ufff8" +
    "\016\ufff8\021\ufff8\025\ufff8\036\ufff8\001\002\000\004\035" +
    "\033\001\002\000\016\004\ufff6\007\ufff6\016\ufff6\021\ufff6" +
    "\025\ufff6\036\ufff6\001\002\000\004\002\001\001\002\000" +
    "\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\010\002\004\003\005\004\003\001\001\000" +
    "\006\003\222\004\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\017\011\023\014\024\015\022\001\001\000\002\001" +
    "\001\000\004\017\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\025\011\023\014\024\015\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\031\001" +
    "\001\000\002\001\001\000\014\014\024\015\167\016\172" +
    "\020\171\021\170\001\001\000\004\013\033\001\001\000" +
    "\016\012\054\013\045\014\024\015\040\022\041\023\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\161\023\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\151\001" +
    "\001\000\004\023\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\054\013\045\014\024\015\040\022" +
    "\055\023\036\001\001\000\002\001\001\000\006\023\061" +
    "\024\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\117\001\001\000\004\023\116" +
    "\001\001\000\004\023\115\001\001\000\004\023\114\001" +
    "\001\000\006\014\024\015\112\001\001\000\004\023\111" +
    "\001\001\000\002\001\001\000\004\023\076\001\001\000" +
    "\004\023\075\001\001\000\004\023\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\110\001\001\000\010\023\104\025\103" +
    "\026\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\104\025\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\061\024\121\001\001\000\002\001\001\000\006" +
    "\023\061\024\123\001\001\000\002\001\001\000\014\012" +
    "\125\013\045\014\024\015\040\023\036\001\001\000\002" +
    "\001\001\000\004\023\132\001\001\000\010\023\104\025" +
    "\103\026\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\023\104\025" +
    "\103\026\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\141\001\001\000\002\001" +
    "\001\000\014\012\143\013\045\014\024\015\040\023\036" +
    "\001\001\000\002\001\001\000\014\012\145\013\045\014" +
    "\024\015\040\023\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\163" +
    "\001\001\000\002\001\001\000\004\023\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\024\015\167\016\172\021\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\200\001" +
    "\001\000\004\013\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\216\001\001" +
    "\000\002\001\001\000\004\013\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // list_stmt ::= 
            {
              LinkedList<PStmt> RESULT =null;
		 RESULT = new LinkedList<PStmt>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // list_stmt ::= stmt list_stmt 
            {
              LinkedList<PStmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PStmt s = (PStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<PStmt> l = (LinkedList<PStmt>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(s); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // nonempty_list_comma_expr ::= expr 
            {
              LinkedList<PExpr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PExpr x = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<PExpr> l = new LinkedList<PExpr>();
      l.add(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // nonempty_list_comma_expr ::= expr COMMA nonempty_list_comma_expr 
            {
              LinkedList<PExpr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PExpr x = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<PExpr> l = (LinkedList<PExpr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // list_comma_expr ::= 
            {
              LinkedList<PExpr> RESULT =null;
		 RESULT = new LinkedList<PExpr>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comma_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // list_comma_expr ::= nonempty_list_comma_expr 
            {
              LinkedList<PExpr> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<PExpr> l = (LinkedList<PExpr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comma_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= LP expr RP 
            {
              PExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PExpr e = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr INSTANCEOF type 
            {
              PExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PExpr e = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PType ty = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PEinstanceof (e, ty); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= LP expr RP expr 
            {
              PExpr RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PExpr ty = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PExpr e = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (ty instanceof PEident)
         RESULT = new PEcast(new PTident(((PEident)ty).id), e);
       else
         throw new Exception("ident expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= LP base_type RP expr 
            {
              PExpr RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PType ty = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PExpr e = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PEcast (ty, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr DOT IDENT LP list_comma_expr RP 
            {
              PExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		PExpr e = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<PExpr> al = (LinkedList<PExpr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PEcall (e, id, al); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= IDENT LP list_comma_expr RP 
            {
              PExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<PExpr> al = (LinkedList<PExpr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PEcall (id, al); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= NEW IDENT LP list_comma_expr RP 
            {
              PExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<PExpr> al = (LinkedList<PExpr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PEnew (id, al); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr DOT IDENT EQUAL expr 
            {
              PExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		PExpr e1 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PExpr e2 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PEassignDot(e1, id, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= IDENT EQUAL expr 
            {
              PExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PExpr e = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PEassignIdent(id, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr DOT IDENT 
            {
              PExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PExpr e = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PEdot(e, id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= IDENT 
            {
              PExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PEident(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr OR expr 
            {
              PExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PExpr e1 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PExpr e2 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PEbinop(Binop.Bor, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr AND expr 
            {
              PExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PExpr e1 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PExpr e2 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PEbinop(Binop.Band, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr CMP expr 
            {
              PExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PExpr e1 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Binop c = (Binop)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PExpr e2 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PEbinop(c, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr MOD expr 
            {
              PExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PExpr e1 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PExpr e2 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PEbinop(Binop.Bmod, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr DIV expr 
            {
              PExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PExpr e1 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PExpr e2 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PEbinop(Binop.Bdiv, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr TIMES expr 
            {
              PExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PExpr e1 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PExpr e2 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PEbinop(Binop.Bmul, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr MINUS expr 
            {
              PExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PExpr e1 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PExpr e2 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PEbinop(Binop.Bsub, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr PLUS expr 
            {
              PExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PExpr e1 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PExpr e2 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PEbinop(Binop.Badd, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= NOT expr 
            {
              PExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PExpr e1 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PEunop(Unop.Unot, e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= MINUS expr 
            {
              PExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PExpr e1 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PEunop(Unop.Uneg, e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= NULL 
            {
              PExpr RESULT =null;
		 RESULT = new PEnull(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= THIS 
            {
              PExpr RESULT =null;
		 RESULT = new PEthis(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= CST 
            {
              PExpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PEcst(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // option_expr ::= 
            {
              PExpr RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // option_expr ::= expr 
            {
              PExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PExpr e = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= FOR LP option_expr SEMICOLON option_expr SEMICOLON option_expr RP stmt 
            {
              PStmt RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		PExpr e1 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		PExpr e2 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PExpr e3 = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PStmt s = (PStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 PStmt s1 = e1==null ? new PSblock() : new PSexpr(e1);
       e2 = e2==null ? new PEcst(new Cbool(true)) : e2;
       PStmt s3 = e3==null ? new PSblock() : new PSexpr(e3);
       RESULT = new PSfor (s1, e2, s3, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= block 
            {
              PStmt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PStmt b = (PStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= RETURN expr SEMICOLON 
            {
              PStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PExpr e = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PSreturn(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= RETURN SEMICOLON 
            {
              PStmt RESULT =null;
		 RESULT = new PSreturn(null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= IF LP expr RP stmt ELSE stmt 
            {
              PStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		PExpr e = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PStmt s1 = (PStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PStmt s2 = (PStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PSif (e, s1, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= IF LP expr RP stmt 
            {
              PStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PExpr e = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PStmt s = (PStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PSif (e, s, new PSblock()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= type IDENT SEMICOLON 
            {
              PStmt RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PType ty = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PSvar (ty, id, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= type IDENT EQUAL expr SEMICOLON 
            {
              PStmt RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		PType ty = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PExpr e = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PSvar (ty, id, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= expr SEMICOLON 
            {
              PStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PExpr e = (PExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PSexpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= SEMICOLON 
            {
              PStmt RESULT =null;
		 RESULT = new PSblock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= IDENT 
            {
              PType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PTident(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= base_type 
            {
              PType RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PType ty = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ty; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // base_type ::= BOOLEAN 
            {
              PType RESULT =null;
		 RESULT = new PTboolean(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("base_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // base_type ::= INT 
            {
              PType RESULT =null;
		 RESULT = new PTint(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("base_type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // param ::= type IDENT 
            {
              PParam RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PType ty = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PParam(ty, id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // nonempty_list_comma_param ::= param 
            {
              LinkedList<PParam> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PParam x = (PParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<PParam> l = new LinkedList<PParam>();
      l.add(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // nonempty_list_comma_param ::= param COMMA nonempty_list_comma_param 
            {
              LinkedList<PParam> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PParam x = (PParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<PParam> l = (LinkedList<PParam>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_param",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // list_comma_param ::= 
            {
              LinkedList<PParam> RESULT =null;
		 RESULT = new LinkedList<PParam>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comma_param",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_comma_param ::= nonempty_list_comma_param 
            {
              LinkedList<PParam> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<PParam> l = (LinkedList<PParam>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comma_param",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parameters ::= LP list_comma_param RP 
            {
              LinkedList<PParam> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<PParam> l = (LinkedList<PParam>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // block ::= LBRA list_stmt RBRA 
            {
              PStmt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<PStmt> l = (LinkedList<PStmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PSblock(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ident_String ::= IDENT 
            {
              Ident RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (!id.id.equals("String")) throw new Exception("String expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_String",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ident_main ::= IDENT 
            {
              Ident RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (!id.id.equals("main")) throw new Exception("main expected"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_main",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decl ::= VOID IDENT parameters block 
            {
              PDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<PParam> p = (LinkedList<PParam>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PStmt b = (PStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PDmethod (null, id, p, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decl ::= type IDENT parameters block 
            {
              PDecl RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PType ty = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<PParam> p = (LinkedList<PParam>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PStmt b = (PStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PDmethod (ty, id, p, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decl ::= IDENT parameters block 
            {
              PDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<PParam> p = (LinkedList<PParam>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PStmt b = (PStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PDconstructor (id, p, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decl ::= type IDENT SEMICOLON 
            {
              PDecl RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PType ty = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PDattribute (ty, id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl ::= PUBLIC STATIC VOID ident_main LP ident_String IDENT LSQ RSQ RP block 
            {
              PDecl RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PStmt b = (PStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PDmethod(null, new Ident("main"), null, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // list_decl ::= 
            {
              LinkedList<PDecl> RESULT =null;
		 RESULT = new LinkedList<PDecl>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_decl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // list_decl ::= decl list_decl 
            {
              LinkedList<PDecl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PDecl d = (PDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<PDecl> l = (LinkedList<PDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(d); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_decl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // extends_ ::= 
            {
              Ident RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extends_",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // extends_ ::= EXTENDS IDENT 
            {
              Ident RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extends_",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_ ::= CLASS IDENT extends_ LBRA list_decl RBRA 
            {
              PClass RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Ident ext = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<PDecl> l = (LinkedList<PDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PClass(id, ext, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // list_class ::= 
            {
              LinkedList<PClass> RESULT =null;
		 RESULT = new LinkedList<PClass>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_class",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // list_class ::= class_ list_class 
            {
              LinkedList<PClass> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PClass c = (PClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<PClass> l = (LinkedList<PClass>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(c); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_class",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // file ::= list_class 
            {
              PFile RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<PClass> l = (LinkedList<PClass>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 PClass c = l.getLast();
       if (!c.name.id.equals("Main"))
         throw new Exception("last class must be Main");
       LinkedList<PDecl> dl = c.l;
       if (dl.size() != 1) throw new Exception("syntax error");
       PDecl d = dl.getFirst();
       if (!(d instanceof PDmethod)) throw new Exception("syntax error");
       RESULT = new PFile(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("file",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PFile start_val = (PFile)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

